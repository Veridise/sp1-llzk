// RUN: llzk-opt -split-input-file %s 2>&1 | FileCheck --enable-var-scope %s

// component Head<T: Type, N: Val>(arr: Array<T, N>) {
//   arr[0]
// }
//
// component A<N: Val>() {
//   Head<Val, 3>([N,N+1,N+2])
// }
//
// component B() {
//   Head<A<1>, 2>([A<1>(), A<1>()])
// }
//
// component Top() {
//   a := A<1>();
//   b := B();
//   a = b;
// }
module attributes {veridise.lang = "llzk"} {
  llzk.struct @Head<[@T, @N]> {
    field @"$super" : !llzk.tvar<@T>

    func @compute(%arr: !llzk.array<@N x !llzk.tvar<@T>>) -> !llzk.struct<@Head<[@T, @N]>> {
      %self = new_struct : !llzk.struct<@Head<[@T, @N]>>
      %1 = arith.constant 0 : index
      %2 = readarr %arr[%1] : !llzk.array<@N x !llzk.tvar<@T>>, !llzk.tvar<@T>
      writef %self[@"$super"] = %2 : !llzk.struct<@Head<[@T, @N]>>, !llzk.tvar<@T>
      return %self : !llzk.struct<@Head<[@T, @N]>>
    }

    func @constrain(%self: !llzk.struct<@Head<[@T, @N]>>, %arr: !llzk.array<@N x !llzk.tvar<@T>>) {
      %1 = arith.constant 0 : index
      %2 = readarr %arr[%1] : !llzk.array<@N x !llzk.tvar<@T>>, !llzk.tvar<@T>
      %3 = readf %self[@"$super"] : !llzk.struct<@Head<[@T, @N]>>, !llzk.tvar<@T>
      emit_eq %2, %3 : !llzk.tvar<@T>
      return
    }
  }

  llzk.struct @A<[@N]> {
    field @"$super" : !llzk.struct<@Head<[!llzk.felt, 3]>>

    func @compute() -> !llzk.struct<@A<[@N]>> {
      %self = new_struct : !llzk.struct<@A<[@N]>>
      %1 = read_const @N : !llzk.felt
      %2 = constfelt 1
      %3 = constfelt 2
      %4 = add %1, %2
      %5 = add %1, %3
      %6 = new_array %1, %4, %5 : !llzk.array<3 x !llzk.felt>
      %7 = call @Head::@compute(%6) : (!llzk.array<3 x !llzk.felt>) -> !llzk.struct<@Head<[!llzk.felt, 3]>>
      writef %self[@"$super"] = %7 : !llzk.struct<@A<[@N]>>, !llzk.struct<@Head<[!llzk.felt, 3]>>
      return %self : !llzk.struct<@A<[@N]>>
    }

    func @constrain(%self: !llzk.struct<@A<[@N]>>) {
      %0 = readf %self[@"$super"] : !llzk.struct<@A<[@N]>>, !llzk.struct<@Head<[!llzk.felt, 3]>>
      %1 = read_const @N : !llzk.felt
      %2 = constfelt 1
      %3 = constfelt 2
      %4 = add %1, %2
      %5 = add %1, %3
      %arr = new_array %1, %4, %5 : !llzk.array<3 x !llzk.felt>
      call @Head::@constrain(%0, %arr) : (!llzk.struct<@Head<[!llzk.felt, 3]>>, !llzk.array<3 x !llzk.felt>) -> ()
      return
    }
  }

  llzk.struct @B {
    field @"$super" : !llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>

    func @compute() -> !llzk.struct<@B> {
      %self = new_struct : !llzk.struct<@B>
      %1 = call @A::@compute() : () -> !llzk.struct<@A<[1]>>
      %2 = call @A::@compute() : () -> !llzk.struct<@A<[1]>>
      %3 = new_array %1, %2 : !llzk.array<2 x !llzk.struct<@A<[1]>>>
      %4 = call @Head::@compute(%3) : (!llzk.array<2 x !llzk.struct<@A<[1]>>>) -> !llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>
      writef %self[@"$super"] = %4 : !llzk.struct<@B>, !llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>
      return %self : !llzk.struct<@B>
    }

    func @constrain(%self: !llzk.struct<@B>) {
      %0 = readf %self[@"$super"] : !llzk.struct<@B>, !llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>
      %arr = new_array : !llzk.array<2 x !llzk.struct<@A<[1]>>>
      call @Head::@constrain(%0, %arr) : (!llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>, !llzk.array<2 x !llzk.struct<@A<[1]>>>) -> ()
      return
    }
  }

  llzk.struct @Top {
    field @"$super" : !llzk.struct<@VoidComponent>
    field @a : !llzk.struct<@A<[1]>>
    field @b : !llzk.struct<@B>

    func @compute() -> !llzk.struct<@Top> {
      %self = new_struct : !llzk.struct<@Top>
      %1 = call @A::@compute() : () -> !llzk.struct<@A<[1]>>
      writef %self[@a] = %1 : !llzk.struct<@Top>, !llzk.struct<@A<[1]>>
      %2 = call @B::@compute() : () -> !llzk.struct<@B>
      writef %self[@b] = %2 : !llzk.struct<@Top>, !llzk.struct<@B>
      %3 = call @VoidComponent::@compute() : () -> !llzk.struct<@VoidComponent>
      writef %self[@"$super"] = %3 : !llzk.struct<@Top>, !llzk.struct<@VoidComponent>
      return %self : !llzk.struct<@Top>
    }

    func @constrain(%self: !llzk.struct<@Top>) {
      %0 = readf %self[@a] : !llzk.struct<@Top>, !llzk.struct<@A<[1]>>
      call @A::@constrain(%0) : (!llzk.struct<@A<[1]>>) -> ()
      %1 = readf %self[@b] : !llzk.struct<@Top>, !llzk.struct<@B>
      call @B::@constrain(%1) : (!llzk.struct<@B>) -> ()
      %2 = readf %0[@"$super"] : !llzk.struct<@A<[1]>>, !llzk.struct<@Head<[!llzk.felt, 3]>>
      %3 = readf %2[@"$super"] : !llzk.struct<@Head<[!llzk.felt, 3]>>, !llzk.felt
      %4 = readf %1[@"$super"] : !llzk.struct<@B>, !llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>
      %5 = readf %4[@"$super"] : !llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>, !llzk.struct<@A<[1]>>
      %6 = readf %5[@"$super"] : !llzk.struct<@A<[1]>>, !llzk.struct<@Head<[!llzk.felt, 3]>>
      %7 = readf %6[@"$super"] : !llzk.struct<@Head<[!llzk.felt, 3]>>, !llzk.felt
      emit_eq %3, %7 : !llzk.felt
      %8 = readf %self[@"$super"]: !llzk.struct<@Top>, !llzk.struct<@VoidComponent>
      call @VoidComponent::@constrain(%8) : (!llzk.struct<@VoidComponent>) -> ()
      return
    }
  }

  llzk.struct @VoidComponent {
    func @compute() -> !llzk.struct<@VoidComponent> {
      %self = new_struct : !llzk.struct<@VoidComponent>
      return %self : !llzk.struct<@VoidComponent>
    }

    func @constrain(%self: !llzk.struct<@VoidComponent>) { return }
  }
}

//CHECK-LABEL: module attributes {veridise.lang = "llzk"} {
//CHECK-LABEL: llzk.struct @Head<[@T, @N]> {
//CHECK-NEXT:    field @"$super" : !llzk.tvar<@T>
//CHECK-NEXT:    func @compute(%arg0: !llzk.array<@N x !llzk.tvar<@T>>) -> !llzk.struct<@Head<[@T, @N]>> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@Head<[@T, @N]>>
//CHECK-NEXT:      %[[C1:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = readarr %arg0[%[[C1]]] : <@N x !llzk.tvar<@T>>, !llzk.tvar<@T>
//CHECK-NEXT:      writef %[[SELF]][@"$super"] = %[[T0]] : <@Head<[@T, @N]>>, !llzk.tvar<@T>
//CHECK-NEXT:      return %[[SELF]] : !llzk.struct<@Head<[@T, @N]>>
//CHECK-NEXT:    }
//CHECK-NEXT:    func @constrain(%arg0: !llzk.struct<@Head<[@T, @N]>>, %arg1: !llzk.array<@N x !llzk.tvar<@T>>) {
//CHECK-NEXT:      %[[C2:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = readarr %arg1[%[[C2]]] : <@N x !llzk.tvar<@T>>, !llzk.tvar<@T>
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = readf %arg0[@"$super"] : <@Head<[@T, @N]>>, !llzk.tvar<@T>
//CHECK-NEXT:      emit_eq %[[T0]], %[[T1]] : !llzk.tvar<@T>, !llzk.tvar<@T>
//CHECK-NEXT:      return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: llzk.struct @A<[@N]> {
//CHECK-NEXT:    field @"$super" : !llzk.struct<@Head<[!llzk.felt, 3]>>
//CHECK-NEXT:    func @compute() -> !llzk.struct<@A<[@N]>> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@A<[@N]>>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = read_const @N : !llzk.felt
//CHECK-NEXT:      %[[C1:[0-9a-zA-Z_\.]+]] = constfelt 1
//CHECK-NEXT:      %[[C2:[0-9a-zA-Z_\.]+]] = constfelt 2
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = add %[[T0]], %[[C1]] : !llzk.felt, !llzk.felt
//CHECK-NEXT:      %[[T2:[0-9a-zA-Z_\.]+]] = add %[[T0]], %[[C2]] : !llzk.felt, !llzk.felt
//CHECK-NEXT:      %[[ARRAY:[0-9a-zA-Z_\.]+]] = new_array %[[T0]], %[[T1]], %[[T2]] : <3 x !llzk.felt>
//CHECK-NEXT:      %[[T3:[0-9a-zA-Z_\.]+]] = call @Head::@compute(%[[ARRAY]]) : (!llzk.array<3 x !llzk.felt>) -> !llzk.struct<@Head<[!llzk.felt, 3]>>
//CHECK-NEXT:      writef %[[SELF]][@"$super"] = %[[T3]] : <@A<[@N]>>, !llzk.struct<@Head<[!llzk.felt, 3]>>
//CHECK-NEXT:      return %[[SELF]] : !llzk.struct<@A<[@N]>>
//CHECK-NEXT:    }
//CHECK-NEXT:    func @constrain(%arg0: !llzk.struct<@A<[@N]>>) {
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = readf %arg0[@"$super"] : <@A<[@N]>>, !llzk.struct<@Head<[!llzk.felt, 3]>>
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = read_const @N : !llzk.felt
//CHECK-NEXT:      %[[C3:[0-9a-zA-Z_\.]+]] = constfelt 1
//CHECK-NEXT:      %[[C4:[0-9a-zA-Z_\.]+]] = constfelt 2
//CHECK-NEXT:      %[[T2:[0-9a-zA-Z_\.]+]] = add %[[T1]], %[[C3]] : !llzk.felt, !llzk.felt
//CHECK-NEXT:      %[[T3:[0-9a-zA-Z_\.]+]] = add %[[T1]], %[[C4]] : !llzk.felt, !llzk.felt
//CHECK-NEXT:      %[[ARRAY:[0-9a-zA-Z_\.]+]] = new_array %[[T1]], %[[T2]], %[[T3]] : <3 x !llzk.felt>
//CHECK-NEXT:      call @Head::@constrain(%[[T0]], %[[ARRAY]]) : (!llzk.struct<@Head<[!llzk.felt, 3]>>, !llzk.array<3 x !llzk.felt>) -> ()
//CHECK-NEXT:      return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: llzk.struct @B {
//CHECK-NEXT:    field @"$super" : !llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>
//CHECK-NEXT:    func @compute() -> !llzk.struct<@B> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@B>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = call @A::@compute() : () -> !llzk.struct<@A<[1]>>
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = call @A::@compute() : () -> !llzk.struct<@A<[1]>>
//CHECK-NEXT:      %[[ARRAY:[0-9a-zA-Z_\.]+]] = new_array %[[T0]], %[[T1]] : <2 x !llzk.struct<@A<[1]>>>
//CHECK-NEXT:      %[[T2:[0-9a-zA-Z_\.]+]] = call @Head::@compute(%[[ARRAY]]) : (!llzk.array<2 x !llzk.struct<@A<[1]>>>) -> !llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>
//CHECK-NEXT:      writef %[[SELF]][@"$super"] = %[[T2]] : <@B>, !llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>
//CHECK-NEXT:      return %[[SELF]] : !llzk.struct<@B>
//CHECK-NEXT:    }
//CHECK-NEXT:    func @constrain(%arg0: !llzk.struct<@B>) {
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = readf %arg0[@"$super"] : <@B>, !llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>
//CHECK-NEXT:      %[[ARRAY:[0-9a-zA-Z_\.]+]] = new_array  : <2 x !llzk.struct<@A<[1]>>>
//CHECK-NEXT:      call @Head::@constrain(%[[T0]], %[[ARRAY]]) : (!llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>, !llzk.array<2 x !llzk.struct<@A<[1]>>>) -> ()
//CHECK-NEXT:      return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: llzk.struct @Top {
//CHECK-NEXT:    field @"$super" : !llzk.struct<@VoidComponent>
//CHECK-NEXT:    field @a : !llzk.struct<@A<[1]>>
//CHECK-NEXT:    field @b : !llzk.struct<@B>
//CHECK-NEXT:    func @compute() -> !llzk.struct<@Top> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@Top>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = call @A::@compute() : () -> !llzk.struct<@A<[1]>>
//CHECK-NEXT:      writef %[[SELF]][@a] = %[[T0]] : <@Top>, !llzk.struct<@A<[1]>>
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = call @B::@compute() : () -> !llzk.struct<@B>
//CHECK-NEXT:      writef %[[SELF]][@b] = %[[T1]] : <@Top>, !llzk.struct<@B>
//CHECK-NEXT:      %[[T2:[0-9a-zA-Z_\.]+]] = call @VoidComponent::@compute() : () -> !llzk.struct<@VoidComponent>
//CHECK-NEXT:      writef %[[SELF]][@"$super"] = %[[T2]] : <@Top>, !llzk.struct<@VoidComponent>
//CHECK-NEXT:      return %[[SELF]] : !llzk.struct<@Top>
//CHECK-NEXT:    }
//CHECK-NEXT:    func @constrain(%arg0: !llzk.struct<@Top>) {
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = readf %arg0[@a] : <@Top>, !llzk.struct<@A<[1]>>
//CHECK-NEXT:      call @A::@constrain(%[[T0]]) : (!llzk.struct<@A<[1]>>) -> ()
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = readf %arg0[@b] : <@Top>, !llzk.struct<@B>
//CHECK-NEXT:      call @B::@constrain(%[[T1]]) : (!llzk.struct<@B>) -> ()
//CHECK-NEXT:      %[[T2:[0-9a-zA-Z_\.]+]] = readf %[[T0]][@"$super"] : <@A<[1]>>, !llzk.struct<@Head<[!llzk.felt, 3]>>
//CHECK-NEXT:      %[[T3:[0-9a-zA-Z_\.]+]] = readf %[[T2]][@"$super"] : <@Head<[!llzk.felt, 3]>>, !llzk.felt
//CHECK-NEXT:      %[[T4:[0-9a-zA-Z_\.]+]] = readf %[[T1]][@"$super"] : <@B>, !llzk.struct<@Head<[!llzk.struct<@A<[1]>>, 2]>>
//CHECK-NEXT:      %[[T5:[0-9a-zA-Z_\.]+]] = readf %[[T4]][@"$super"] : <@Head<[!llzk.struct<@A<[1]>>, 2]>>, !llzk.struct<@A<[1]>>
//CHECK-NEXT:      %[[T6:[0-9a-zA-Z_\.]+]] = readf %[[T5]][@"$super"] : <@A<[1]>>, !llzk.struct<@Head<[!llzk.felt, 3]>>
//CHECK-NEXT:      %[[T7:[0-9a-zA-Z_\.]+]] = readf %[[T6]][@"$super"] : <@Head<[!llzk.felt, 3]>>, !llzk.felt
//CHECK-NEXT:      emit_eq %[[T3]], %[[T7]] : !llzk.felt, !llzk.felt
//CHECK-NEXT:      %[[T8:[0-9a-zA-Z_\.]+]] = readf %arg0[@"$super"] : <@Top>, !llzk.struct<@VoidComponent>
//CHECK-NEXT:      call @VoidComponent::@constrain(%[[T8]]) : (!llzk.struct<@VoidComponent>) -> ()
//CHECK-NEXT:      return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: llzk.struct @VoidComponent {
//CHECK-NEXT:    func @compute() -> !llzk.struct<@VoidComponent> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@VoidComponent>
//CHECK-NEXT:      return %[[SELF]] : !llzk.struct<@VoidComponent>
//CHECK-NEXT:    }
//CHECK-NEXT:    func @constrain(%arg0: !llzk.struct<@VoidComponent>) {
//CHECK-NEXT:      return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
