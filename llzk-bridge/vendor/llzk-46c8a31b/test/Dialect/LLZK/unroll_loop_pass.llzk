// RUN: llzk-opt -I %S -split-input-file -llzk-flatten -verify-diagnostics %s | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  llzk.struct @SingleLoop {
    func @constrain(%self: !llzk.struct<@SingleLoop>, %in: !llzk.array<5 x !llzk.felt>) {
      %lb = arith.constant 0 : index
      %up = arith.constant 5 : index
      %step = arith.constant 1 : index
      %fval = llzk.constfelt 7
      scf.for %iv = %lb to %up step %step {
        %elem = llzk.readarr %in[%iv] : !llzk.array<5 x !llzk.felt>, !llzk.felt
        llzk.emit_eq %elem, %fval : !llzk.felt
      }
      return
    }

    func @compute(%in: !llzk.array<5 x !llzk.felt>) -> !llzk.struct<@SingleLoop> {
      %self = new_struct : !llzk.struct<@SingleLoop>
      return %self : !llzk.struct<@SingleLoop>
    }
  }
}
// CHECK-LABEL: llzk.struct @SingleLoop {
// CHECK-NEXT:    func @constrain(%[[V0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@SingleLoop>, %[[V1:[0-9a-zA-Z_\.]+]]: !llzk.array<5 x !llzk.felt>) {
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = arith.constant 4 : index
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = arith.constant 3 : index
// CHECK-NEXT:      %[[V4:[0-9a-zA-Z_\.]+]] = arith.constant 2 : index
// CHECK-NEXT:      %[[V5:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V6:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V7:[0-9a-zA-Z_\.]+]] = constfelt 7
// CHECK-NEXT:      %[[V8:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V5]]] : <5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V8]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V9:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V6]]] : <5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V9]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V10:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V4]]] : <5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V10]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V11:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V3]]] : <5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V11]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V12:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V2]]] : <5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V12]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:    func @compute(%[[V13:[0-9a-zA-Z_\.]+]]: !llzk.array<5 x !llzk.felt>) -> !llzk.struct<@SingleLoop> {
// CHECK-NEXT:      %[[V14:[0-9a-zA-Z_\.]+]] = new_struct : <@SingleLoop>
// CHECK-NEXT:      return %[[V14]] : !llzk.struct<@SingleLoop>
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @NestedLoopEasy {
    func @constrain(%self: !llzk.struct<@NestedLoopEasy>, %in: !llzk.array<5,5 x !llzk.felt>) {
      %lb = arith.constant 0 : index
      %up = arith.constant 5 : index
      %step = arith.constant 1 : index
      %fval = llzk.constfelt 7
      scf.for %i = %lb to %up step %step {
        scf.for %j = %lb to %up step %step {
          %elem = llzk.readarr %in[%i,%j] : !llzk.array<5,5 x !llzk.felt>, !llzk.felt
          llzk.emit_eq %elem, %fval : !llzk.felt
        }
      }
      return
    }

    func @compute(%in: !llzk.array<5,5 x !llzk.felt>) -> !llzk.struct<@NestedLoopEasy> {
      %self = new_struct : !llzk.struct<@NestedLoopEasy>
      return %self : !llzk.struct<@NestedLoopEasy>
    }
  }
}
// CHECK-LABEL: llzk.struct @NestedLoopEasy {
// CHECK-NEXT:    func @constrain(%[[V0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@NestedLoopEasy>, %[[V1:[0-9a-zA-Z_\.]+]]: !llzk.array<5,5 x !llzk.felt>) {
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = arith.constant 4 : index
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = arith.constant 3 : index
// CHECK-NEXT:      %[[V4:[0-9a-zA-Z_\.]+]] = arith.constant 2 : index
// CHECK-NEXT:      %[[V5:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V6:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V7:[0-9a-zA-Z_\.]+]] = constfelt 7
// CHECK-NEXT:      %[[V8:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V5]], %[[V5]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V8]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V9:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V5]], %[[V6]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V9]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V10:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V5]], %[[V4]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V10]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V11:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V5]], %[[V3]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V11]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V12:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V5]], %[[V2]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V12]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V13:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V6]], %[[V5]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V13]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V14:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V6]], %[[V6]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V14]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V15:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V6]], %[[V4]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V15]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V16:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V6]], %[[V3]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V16]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V17:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V6]], %[[V2]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V17]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V18:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V4]], %[[V5]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V18]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V19:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V4]], %[[V6]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V19]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V20:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V4]], %[[V4]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V20]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V21:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V4]], %[[V3]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V21]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V22:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V4]], %[[V2]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V22]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V23:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V3]], %[[V5]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V23]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V24:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V3]], %[[V6]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V24]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V25:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V3]], %[[V4]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V25]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V26:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V3]], %[[V3]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V26]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V27:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V3]], %[[V2]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V27]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V28:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V2]], %[[V5]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V28]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V29:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V2]], %[[V6]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V29]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V30:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V2]], %[[V4]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V30]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V31:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V2]], %[[V3]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V31]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V32:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V2]], %[[V2]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V32]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:    func @compute(%[[V33:[0-9a-zA-Z_\.]+]]: !llzk.array<5,5 x !llzk.felt>) -> !llzk.struct<@NestedLoopEasy> {
// CHECK-NEXT:      %[[V34:[0-9a-zA-Z_\.]+]] = new_struct : <@NestedLoopEasy>
// CHECK-NEXT:      return %[[V34]] : !llzk.struct<@NestedLoopEasy>
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

// Inner loop range depends on outer loop. Requires erasing 0-count loops.
module attributes {veridise.lang = "llzk"} {
  llzk.struct @NestedLoopHard {
    func @constrain(%self: !llzk.struct<@NestedLoopHard>, %in: !llzk.array<5,5 x !llzk.felt>) {
      %lb = arith.constant 0 : index
      %up = arith.constant 5 : index
      %step = arith.constant 1 : index
      %fval = llzk.constfelt 7
      scf.for %i = %lb to %up step %step {
        scf.for %j = %lb to %i step %step {
          %elem = llzk.readarr %in[%i,%j] : !llzk.array<5,5 x !llzk.felt>, !llzk.felt
          llzk.emit_eq %elem, %fval : !llzk.felt
        }
      }
      return
    }

    func @compute(%in: !llzk.array<5,5 x !llzk.felt>) -> !llzk.struct<@NestedLoopHard> {
      %self = new_struct : !llzk.struct<@NestedLoopHard>
      return %self : !llzk.struct<@NestedLoopHard>
    }
  }
}
// CHECK-LABEL: llzk.struct @NestedLoopHard {
// CHECK-NEXT:    func @constrain(%[[V0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@NestedLoopHard>, %[[V1:[0-9a-zA-Z_\.]+]]: !llzk.array<5,5 x !llzk.felt>) {
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = arith.constant 4 : index
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = arith.constant 3 : index
// CHECK-NEXT:      %[[V4:[0-9a-zA-Z_\.]+]] = arith.constant 2 : index
// CHECK-NEXT:      %[[V5:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V6:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V7:[0-9a-zA-Z_\.]+]] = constfelt 7
// CHECK-NEXT:      %[[V8:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V6]], %[[V5]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V8]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V9:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V4]], %[[V5]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V9]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V10:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V4]], %[[V6]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V10]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V11:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V3]], %[[V5]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V11]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V12:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V3]], %[[V6]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V12]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V13:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V3]], %[[V4]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V13]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V14:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V2]], %[[V5]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V14]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V15:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V2]], %[[V6]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V15]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V16:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V2]], %[[V4]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V16]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V17:[0-9a-zA-Z_\.]+]] = readarr %[[V1]]{{\[}}%[[V2]], %[[V3]]] : <5,5 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V17]], %[[V7]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:    func @compute(%[[V18:[0-9a-zA-Z_\.]+]]: !llzk.array<5,5 x !llzk.felt>) -> !llzk.struct<@NestedLoopHard> {
// CHECK-NEXT:      %[[V19:[0-9a-zA-Z_\.]+]] = new_struct : <@NestedLoopHard>
// CHECK-NEXT:      return %[[V19]] : !llzk.struct<@NestedLoopHard>
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

// Before the loop in Component02 can unroll, the struct must be instantiated. 
!Signal = !llzk.struct<@Signal>
module attributes {veridise.lang = "llzk"} {
  // pre-defined
  llzk.struct @Signal {
    field @reg : !llzk.felt {llzk.pub}

    func @compute(%v: !llzk.felt) -> !llzk.struct<@Signal> {
      %self = new_struct : !llzk.struct<@Signal>
      writef %self[@reg] = %v : !llzk.struct<@Signal>, !llzk.felt
      return %self : !llzk.struct<@Signal>
    }

    func @constrain(%self: !llzk.struct<@Signal>, %v: !llzk.felt) {
      return
    }
  }

  llzk.struct @Component01 {
    field @f : !llzk.array<2 x !Signal>

    func @compute(%0: !llzk.array<2 x !Signal>) -> !llzk.struct<@Component01> {
      %self = new_struct : !llzk.struct<@Component01>
      writef %self[@f] = %0 : !llzk.struct<@Component01>, !llzk.array<2 x !Signal>
      return %self : !llzk.struct<@Component01>
    }
    func @constrain(%self: !llzk.struct<@Component01>, %0: !llzk.array<2 x !Signal>) {
      %b = readf %self[@f] : !llzk.struct<@Component01>, !llzk.array<2 x !Signal>

      %lb = arith.constant 0 : index
      %up = arith.constant 2 : index
      %step = arith.constant 1 : index
      scf.for %i = %lb to %up step %step {
        %i0 = llzk.readarr %0[%i] : !llzk.array<2 x !Signal>, !Signal
        %i0val = llzk.readf %i0[@reg] : !Signal, !llzk.felt
        %ib = llzk.readarr %b[%i] : !llzk.array<2 x !Signal>, !Signal
        %ibval = llzk.readf %ib[@reg] : !Signal, !llzk.felt
        llzk.emit_eq %i0val, %ibval : !llzk.felt
      }
      //TODO: It would be better to allow the line below instead of needing the loop above.
      //  However, `emit_eq` is restricted to not allow StructType. Maybe we could add an
      //  explicit case for the struct named COMPONENT_NAME_SIGNAL and define the semantics
      //  of `emit_eq` to "look through" the struct to the `felt` field.
      //
      // emit_eq %b, %0 : !llzk.array<2 x !Signal>
      return
    }
  }

  llzk.struct @Component02<[@N]> {
    field @g : !llzk.array<@N x !llzk.struct<@Component01>>

    func @compute(%in: !llzk.array<@N,2 x !Signal>) -> !llzk.struct<@Component02<[@N]>> {
      %self = new_struct : !llzk.struct<@Component02<[@N]>>
      %a = new_array : !llzk.array<@N x !llzk.struct<@Component01>>

      %lb = arith.constant 0 : index
      %up = read_const @N : index
      %step = arith.constant 1 : index
      scf.for %iv = %lb to %up step %step {
        %p = llzk.extractarr %in[%iv] : !llzk.array<@N,2 x !Signal>
        %c = llzk.call @Component01::@compute(%p) : (!llzk.array<2 x !Signal>) -> !llzk.struct<@Component01>
        llzk.writearr %a[%iv] = %c : !llzk.array<@N x !llzk.struct<@Component01>>, !llzk.struct<@Component01>
      }

      writef %self[@g] = %a : !llzk.struct<@Component02<[@N]>>, !llzk.array<@N x !llzk.struct<@Component01>>
      return %self : !llzk.struct<@Component02<[@N]>>
    }

    func @constrain(%self: !llzk.struct<@Component02<[@N]>>, %in: !llzk.array<@N,2 x !Signal>) {
      %a = readf %self[@g] : !llzk.struct<@Component02<[@N]>>, !llzk.array<@N x !llzk.struct<@Component01>>

      %lb = arith.constant 0 : index
      %up = read_const @N : index
      %step = arith.constant 1 : index
      scf.for %iv = %lb to %up step %step {
        %p = llzk.extractarr %in[%iv] : !llzk.array<@N,2 x !Signal>
        %c = llzk.readarr %a[%iv] : !llzk.array<@N x !llzk.struct<@Component01>>, !llzk.struct<@Component01>
        llzk.call @Component01::@constrain(%c, %p) : (!llzk.struct<@Component01>, !llzk.array<2 x !Signal>) -> ()
      }
      return
    }
  }

  llzk.struct @Main {
    field @sub: !llzk.struct<@Component02<[3]>>
  
    func @compute(%input: !llzk.array<3,2 x !Signal>) -> !llzk.struct<@Main> {
      %self = llzk.new_struct : !llzk.struct<@Main>
      %sub = llzk.call @Component02::@compute(%input) : (!llzk.array<3,2 x !Signal>) -> !llzk.struct<@Component02<[3]>>
      llzk.writef %self[@sub] = %sub : !llzk.struct<@Main>, !llzk.struct<@Component02<[3]>>
      return %self: !llzk.struct<@Main>
    }
  
    func @constrain(%self: !llzk.struct<@Main>, %input: !llzk.array<3,2 x !Signal>) {
      %sub = llzk.readf %self[@sub] : !llzk.struct<@Main>, !llzk.struct<@Component02<[3]>>
      llzk.call @Component02::@constrain(%sub, %input) : (!llzk.struct<@Component02<[3]>>, !llzk.array<3,2 x !Signal>) -> ()
      return
    }
  }
}
// CHECK-LABEL: llzk.struct @Signal {
// CHECK-NEXT:    field @reg : !llzk.felt {llzk.pub}
// CHECK-NEXT:    func @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !llzk.felt) -> !llzk.struct<@Signal> {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = new_struct : <@Signal>
// CHECK-NEXT:      writef %[[V1]][@reg] = %[[V0]] : <@Signal>, !llzk.felt
// CHECK-NEXT:      return %[[V1]] : !llzk.struct<@Signal>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Signal>, %[[V3:[0-9a-zA-Z_\.]+]]: !llzk.felt) {
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: llzk.struct @Component01 {
// CHECK-NEXT:    field @f : !llzk.array<2 x !llzk.struct<@Signal>>
// CHECK-NEXT:    func @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !llzk.array<2 x !llzk.struct<@Signal>>) -> !llzk.struct<@Component01> {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = new_struct : <@Component01>
// CHECK-NEXT:      writef %[[V1]][@f] = %[[V0]] : <@Component01>, !llzk.array<2 x !llzk.struct<@Signal>>
// CHECK-NEXT:      return %[[V1]] : !llzk.struct<@Component01>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Component01>, %[[V3:[0-9a-zA-Z_\.]+]]: !llzk.array<2 x !llzk.struct<@Signal>>) {
// CHECK-NEXT:      %[[V4:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V5:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V6:[0-9a-zA-Z_\.]+]] = readf %[[V2]][@f] : <@Component01>, !llzk.array<2 x !llzk.struct<@Signal>>
// CHECK-NEXT:      %[[V7:[0-9a-zA-Z_\.]+]] = readarr %[[V3]]{{\[}}%[[V5]]] : <2 x !llzk.struct<@Signal>>, !llzk.struct<@Signal>
// CHECK-NEXT:      %[[V8:[0-9a-zA-Z_\.]+]] = readf %[[V7]][@reg] : <@Signal>, !llzk.felt
// CHECK-NEXT:      %[[V9:[0-9a-zA-Z_\.]+]] = readarr %[[V6]]{{\[}}%[[V5]]] : <2 x !llzk.struct<@Signal>>, !llzk.struct<@Signal>
// CHECK-NEXT:      %[[V10:[0-9a-zA-Z_\.]+]] = readf %[[V9]][@reg] : <@Signal>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V8]], %[[V10]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %[[V11:[0-9a-zA-Z_\.]+]] = readarr %[[V3]]{{\[}}%[[V4]]] : <2 x !llzk.struct<@Signal>>, !llzk.struct<@Signal>
// CHECK-NEXT:      %[[V12:[0-9a-zA-Z_\.]+]] = readf %[[V11]][@reg] : <@Signal>, !llzk.felt
// CHECK-NEXT:      %[[V13:[0-9a-zA-Z_\.]+]] = readarr %[[V6]]{{\[}}%[[V4]]] : <2 x !llzk.struct<@Signal>>, !llzk.struct<@Signal>
// CHECK-NEXT:      %[[V14:[0-9a-zA-Z_\.]+]] = readf %[[V13]][@reg] : <@Signal>, !llzk.felt
// CHECK-NEXT:      emit_eq %[[V12]], %[[V14]] : !llzk.felt, !llzk.felt
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: llzk.struct @Component02_3 {
// CHECK-NEXT:    field @g : !llzk.array<3 x !llzk.struct<@Component01>>
// CHECK-NEXT:    func @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !llzk.array<3,2 x !llzk.struct<@Signal>>) -> !llzk.struct<@Component02_3> {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = arith.constant 2 : index
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V4:[0-9a-zA-Z_\.]+]] = new_struct : <@Component02_3>
// CHECK-NEXT:      %[[V5:[0-9a-zA-Z_\.]+]] = new_array  : <3 x !llzk.struct<@Component01>>
// CHECK-NEXT:      %[[V6:[0-9a-zA-Z_\.]+]] = extractarr %[[V0]]{{\[}}%[[V3]]] : <3,2 x !llzk.struct<@Signal>>
// CHECK-NEXT:      %[[V7:[0-9a-zA-Z_\.]+]] = call @Component01::@compute(%[[V6]]) : (!llzk.array<2 x !llzk.struct<@Signal>>) -> !llzk.struct<@Component01>
// CHECK-NEXT:      writearr %[[V5]]{{\[}}%[[V3]]] = %[[V7]] : <3 x !llzk.struct<@Component01>>, !llzk.struct<@Component01>
// CHECK-NEXT:      %[[V8:[0-9a-zA-Z_\.]+]] = extractarr %[[V0]]{{\[}}%[[V2]]] : <3,2 x !llzk.struct<@Signal>>
// CHECK-NEXT:      %[[V9:[0-9a-zA-Z_\.]+]] = call @Component01::@compute(%[[V8]]) : (!llzk.array<2 x !llzk.struct<@Signal>>) -> !llzk.struct<@Component01>
// CHECK-NEXT:      writearr %[[V5]]{{\[}}%[[V2]]] = %[[V9]] : <3 x !llzk.struct<@Component01>>, !llzk.struct<@Component01>
// CHECK-NEXT:      %[[V10:[0-9a-zA-Z_\.]+]] = extractarr %[[V0]]{{\[}}%[[V1]]] : <3,2 x !llzk.struct<@Signal>>
// CHECK-NEXT:      %[[V11:[0-9a-zA-Z_\.]+]] = call @Component01::@compute(%[[V10]]) : (!llzk.array<2 x !llzk.struct<@Signal>>) -> !llzk.struct<@Component01>
// CHECK-NEXT:      writearr %[[V5]]{{\[}}%[[V1]]] = %[[V11]] : <3 x !llzk.struct<@Component01>>, !llzk.struct<@Component01>
// CHECK-NEXT:      writef %[[V4]][@g] = %[[V5]] : <@Component02_3>, !llzk.array<3 x !llzk.struct<@Component01>>
// CHECK-NEXT:      return %[[V4]] : !llzk.struct<@Component02_3>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V12:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Component02_3>, %[[V13:[0-9a-zA-Z_\.]+]]: !llzk.array<3,2 x !llzk.struct<@Signal>>) {
// CHECK-NEXT:      %[[V14:[0-9a-zA-Z_\.]+]] = arith.constant 2 : index
// CHECK-NEXT:      %[[V15:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V16:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V17:[0-9a-zA-Z_\.]+]] = readf %[[V12]][@g] : <@Component02_3>, !llzk.array<3 x !llzk.struct<@Component01>>
// CHECK-NEXT:      %[[V18:[0-9a-zA-Z_\.]+]] = extractarr %[[V13]]{{\[}}%[[V16]]] : <3,2 x !llzk.struct<@Signal>>
// CHECK-NEXT:      %[[V19:[0-9a-zA-Z_\.]+]] = readarr %[[V17]]{{\[}}%[[V16]]] : <3 x !llzk.struct<@Component01>>, !llzk.struct<@Component01>
// CHECK-NEXT:      call @Component01::@constrain(%[[V19]], %[[V18]]) : (!llzk.struct<@Component01>, !llzk.array<2 x !llzk.struct<@Signal>>) -> ()
// CHECK-NEXT:      %[[V20:[0-9a-zA-Z_\.]+]] = extractarr %[[V13]]{{\[}}%[[V15]]] : <3,2 x !llzk.struct<@Signal>>
// CHECK-NEXT:      %[[V21:[0-9a-zA-Z_\.]+]] = readarr %[[V17]]{{\[}}%[[V15]]] : <3 x !llzk.struct<@Component01>>, !llzk.struct<@Component01>
// CHECK-NEXT:      call @Component01::@constrain(%[[V21]], %[[V20]]) : (!llzk.struct<@Component01>, !llzk.array<2 x !llzk.struct<@Signal>>) -> ()
// CHECK-NEXT:      %[[V22:[0-9a-zA-Z_\.]+]] = extractarr %[[V13]]{{\[}}%[[V14]]] : <3,2 x !llzk.struct<@Signal>>
// CHECK-NEXT:      %[[V23:[0-9a-zA-Z_\.]+]] = readarr %[[V17]]{{\[}}%[[V14]]] : <3 x !llzk.struct<@Component01>>, !llzk.struct<@Component01>
// CHECK-NEXT:      call @Component01::@constrain(%[[V23]], %[[V22]]) : (!llzk.struct<@Component01>, !llzk.array<2 x !llzk.struct<@Signal>>) -> ()
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: llzk.struct @Main {
// CHECK-NEXT:    field @sub : !llzk.struct<@Component02_3>
// CHECK-NEXT:    func @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !llzk.array<3,2 x !llzk.struct<@Signal>>) -> !llzk.struct<@Main> {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = new_struct : <@Main>
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = call @Component02_3::@compute(%[[V0]]) : (!llzk.array<3,2 x !llzk.struct<@Signal>>) -> !llzk.struct<@Component02_3>
// CHECK-NEXT:      writef %[[V1]][@sub] = %[[V2]] : <@Main>, !llzk.struct<@Component02_3>
// CHECK-NEXT:      return %[[V1]] : !llzk.struct<@Main>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V3:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Main>, %[[V4:[0-9a-zA-Z_\.]+]]: !llzk.array<3,2 x !llzk.struct<@Signal>>) {
// CHECK-NEXT:      %[[V5:[0-9a-zA-Z_\.]+]] = readf %[[V3]][@sub] : <@Main>, !llzk.struct<@Component02_3>
// CHECK-NEXT:      call @Component02_3::@constrain(%[[V5]], %[[V4]]) : (!llzk.struct<@Component02_3>, !llzk.array<3,2 x !llzk.struct<@Signal>>) -> ()
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
