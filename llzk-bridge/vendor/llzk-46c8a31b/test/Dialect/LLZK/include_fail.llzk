// RUN: llzk-opt -I %S -split-input-file -llzk-inline-includes -verify-diagnostics %s

module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.include' op expected 'builtin.module' from included file to have "veridise.lang" attribute}}
  llzk.include "Inputs/header_3.llzk" as @alias1

  llzk.func @test_func() {
    llzk.call @alias1::@pkg_two::@my_func_2() : () -> ()
    return
  }
}
// -----

module attributes {veridise.lang = "llzk"} {
  module @outer {
    // expected-error@+1 {{'llzk.include' op expected 'builtin.module' from included file to be unnamed}}
    llzk.include "Inputs/header_4.llzk" as @alias2

    llzk.func @test_func() {
      llzk.call @outer::@alias2::@pkg_two::@my_func_2() : () -> ()
      return
    }
  }
}
// -----

module attributes {veridise.lang = "llzk"} {
  module @a {
    module @b {
      module @c {
        // expected-error@+1 {{'llzk.include' op could not find file "Inputs/does_not_exist.llzk"}}
        llzk.include "Inputs/does_not_exist.llzk" as @alias3
      }
    }
  }

  llzk.func @test_func() {
    // expected-error@+2 {{'llzk.call' op references unknown symbol "@a::@b::@c::@alias3::@pkg_two::@my_func_2"}}
    // expected-error@+1 {{expected 'llzk.func' named "@a::@b::@c::@alias3::@pkg_two::@my_func_2"}}
    llzk.call @a::@b::@c::@alias3::@pkg_two::@my_func_2() : () -> ()
    return
  }
}
// -----

module attributes {veridise.lang = "llzk"} {
  // Note: there's also an error within this included file
  llzk.include "Inputs/header_5.llzk" as @double
  // expected-error@+1 {{'llzk.include' op expected 'builtin.module' from included file to be unnamed}}
  llzk.include "Inputs/header_4.llzk" as @single
}
// -----

module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.include' op could not parse file "Inputs/header_6.llzk"}}
  llzk.include "Inputs/header_6.llzk" as @a
}
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.include "Inputs/header_7A.llzk" as @a // expected-note {{included from here}}
}
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.include "Inputs/header_7A.llzk" as @a // expected-note {{included from here}}
  llzk.func @test_func_A() {
    // Note: The error only occurs during inlining, not during the symbol
    //  lookup because that process is bounded by the SymbolRefAttr itself.
    llzk.call @a::@b::@c::@func_in_7c() : () -> ()
    return
  }
}
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.include "Inputs/header_7A.llzk" as @entry // expected-note {{included from here}}
  llzk.func @test_func_B() {
    // Note: Even in this case, symbol lookup will traverse the include cycle but
    //  again, it's bounded by the SymbolRefAttr itself so it will only traverse twice.
    llzk.call @entry::@b::@c::@cycle::@b::@c::@cycle::@b::@c::@func_in_7c() : () -> ()
    return
  }
}
// -----
