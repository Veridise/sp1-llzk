// RUN: llzk-opt %s | FileCheck --enable-var-scope %s

// Pre-defined structs to import in all files generated by zirgen frontend
module attributes {veridise.lang = "llzk"} {
  module @risc0 {
    llzk.struct @ValU32 {
      field @low : !llzk.felt
      field @high : !llzk.felt

      func @compute(%low: !llzk.felt, %high: !llzk.felt) -> !llzk.struct<@risc0::@ValU32> {
        %self = new_struct : !llzk.struct<@risc0::@ValU32>
        writef %self[@low] = %low : !llzk.struct<@risc0::@ValU32>, !llzk.felt
        writef %self[@high] = %high : !llzk.struct<@risc0::@ValU32>, !llzk.felt
        return %self : !llzk.struct<@risc0::@ValU32>
      }

      func @constrain(%self: !llzk.struct<@risc0::@ValU32>, %low: !llzk.felt, %high: !llzk.felt) {
        return
      }
    }

    llzk.struct @Reg {
      // ZIR frontend should mark return value with `pub`
      field @reg : !llzk.felt {llzk.pub}

      func @compute(%v: !llzk.felt) -> !llzk.struct<@risc0::@Reg> {
        %self = new_struct : !llzk.struct<@risc0::@Reg>
        writef %self[@reg] = %v : !llzk.struct<@risc0::@Reg>, !llzk.felt
        return %self : !llzk.struct<@risc0::@Reg>
      }

      func @constrain(%self: !llzk.struct<@risc0::@Reg>, %v: !llzk.felt) {
        %0 = readf %self[@reg] : !llzk.struct<@risc0::@Reg>, !llzk.felt
        emit_eq %v, %0 : !llzk.felt
        return
      }
    }

    llzk.struct @Div {
      field @reciprocal : !llzk.felt
      // ZIR frontend should mark return value with `pub`
      field @synthetic_return : !llzk.felt {llzk.pub}

      func @compute(%lhs: !llzk.felt, %rhs: !llzk.felt) -> !llzk.struct<@risc0::@Div> {
        %self = new_struct : !llzk.struct<@risc0::@Div>
        // res_inv := inv(rhs);
        %res_inv = inv %rhs
        writef %self[@reciprocal] = %res_inv : !llzk.struct<@risc0::@Div>, !llzk.felt
        // self.synthetic_return := res_inv * lhs;
        %res_mul = mul %res_inv, %lhs
        writef %self[@synthetic_return] = %res_mul : !llzk.struct<@risc0::@Div>, !llzk.felt
        //
        return %self : !llzk.struct<@risc0::@Div>
      }

      func @constrain(%self: !llzk.struct<@risc0::@Div>, %lhs: !llzk.felt, %rhs: !llzk.felt) {
        // emit self.reciprocal * rhs = 1;
        %res_inv = readf %self[@reciprocal] : !llzk.struct<@risc0::@Div>, !llzk.felt
        %res_mul_1 = mul %res_inv, %rhs
        %const_1 = constfelt 1
        emit_eq %res_mul_1, %const_1 : !llzk.felt
        // emit self.synthetic_return = self.reciprocal * lhs;
        %res_self = readf %self[@synthetic_return] : !llzk.struct<@risc0::@Div>, !llzk.felt
        %res_mul_2 = mul %res_inv, %lhs
        emit_eq %res_self, %res_mul_2 : !llzk.felt
        //
        return
      }
    }
  }
}

//CHECK-LABEL: module attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:    module @risc0 {
//CHECK-NEXT:      llzk.struct @ValU32 {
//CHECK-NEXT:        field @low : !llzk.felt
//CHECK-NEXT:        field @high : !llzk.felt
//CHECK-NEXT:        func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.felt) -> !llzk.struct<@risc0::@ValU32> {
//CHECK-NEXT:          %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@risc0::@ValU32>
//CHECK-NEXT:          writef %[[SELF]][@low] = %[[A0]] : <@risc0::@ValU32>, !llzk.felt
//CHECK-NEXT:          writef %[[SELF]][@high] = %[[A1]] : <@risc0::@ValU32>, !llzk.felt
//CHECK-NEXT:          return %[[SELF]] : !llzk.struct<@risc0::@ValU32>
//CHECK-NEXT:        }
//CHECK-NEXT:        func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@risc0::@ValU32>,
//CHECK-SAME:        %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.felt, %[[A2:[0-9a-zA-Z_\.]+]]: !llzk.felt) {
//CHECK-NEXT:          return
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:      llzk.struct @Reg {
//CHECK-NEXT:        field @reg : !llzk.felt {llzk.pub}
//CHECK-NEXT:        func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.felt) -> !llzk.struct<@risc0::@Reg> {
//CHECK-NEXT:          %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@risc0::@Reg>
//CHECK-NEXT:          writef %[[SELF]][@reg] = %[[A0]] : <@risc0::@Reg>, !llzk.felt
//CHECK-NEXT:          return %[[SELF]] : !llzk.struct<@risc0::@Reg>
//CHECK-NEXT:        }
//CHECK-NEXT:        func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@risc0::@Reg>, %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.felt) {
//CHECK-NEXT:          %[[T0:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@reg] : <@risc0::@Reg>, !llzk.felt
//CHECK-NEXT:          emit_eq %[[A1]], %[[T0]] : !llzk.felt, !llzk.felt
//CHECK-NEXT:          return
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:      llzk.struct @Div {
//CHECK-NEXT:        field @reciprocal : !llzk.felt
//CHECK-NEXT:        field @synthetic_return : !llzk.felt {llzk.pub}
//CHECK-NEXT:        func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.felt) -> !llzk.struct<@risc0::@Div> {
//CHECK-NEXT:          %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@risc0::@Div>
//CHECK-NEXT:          %[[T0:[0-9a-zA-Z_\.]+]] = inv %[[A1]]
//CHECK-NEXT:          writef %[[SELF]][@reciprocal] = %[[T0]] : <@risc0::@Div>, !llzk.felt
//CHECK-NEXT:          %[[T1:[0-9a-zA-Z_\.]+]] = mul %[[T0]], %[[A0]]
//CHECK-NEXT:          writef %[[SELF]][@synthetic_return] = %[[T1]] : <@risc0::@Div>, !llzk.felt
//CHECK-NEXT:          return %[[SELF]] : !llzk.struct<@risc0::@Div>
//CHECK-NEXT:        }
//CHECK-NEXT:        func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@risc0::@Div>,
//CHECK-SAME:        %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.felt, %[[A2:[0-9a-zA-Z_\.]+]]: !llzk.felt) {
//CHECK-NEXT:          %[[T0:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@reciprocal] : <@risc0::@Div>, !llzk.felt
//CHECK-NEXT:          %[[T1:[0-9a-zA-Z_\.]+]] = mul %[[T0]], %[[A2]]
//CHECK-NEXT:          %felt_const_1 = constfelt 1
//CHECK-NEXT:          emit_eq %[[T1]], %felt_const_1 : !llzk.felt, !llzk.felt
//CHECK-NEXT:          %[[T2:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@synthetic_return] : <@risc0::@Div>, !llzk.felt
//CHECK-NEXT:          %[[T3:[0-9a-zA-Z_\.]+]] = mul %[[T0]], %[[A1]]
//CHECK-NEXT:          emit_eq %[[T2]], %[[T3]] : !llzk.felt, !llzk.felt
//CHECK-NEXT:          return
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:  }
