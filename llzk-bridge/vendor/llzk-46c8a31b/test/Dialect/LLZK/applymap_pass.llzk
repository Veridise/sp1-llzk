// RUN: llzk-opt -split-input-file %s 2>&1 | FileCheck --enable-var-scope %s

llzk.func @no_args() -> index {
  %x = llzk.applymap() affine_map<() -> (12)>
  return %x : index
}
// CHECK: #[[$ATTR_0:.+]] = affine_map<() -> (12)>
// CHECK-LABEL: llzk.func @no_args() -> index {
// CHECK-NEXT:    %[[V_0:[0-9a-zA-Z_\.]+]] = applymap () #[[$ATTR_0]]
// CHECK-NEXT:    return %[[V_0]] : index
// CHECK-NEXT:  }
// -----
#mapA = affine_map<(d0, d1) -> (d0 floordiv 8 + d1 floordiv 128)>
llzk.func @dims_only_no_brackets(%a: index, %b: index) -> index {
  %x = llzk.applymap(%a, %b) #mapA
  return %x : index
}
// CHECK: #[[$ATTR_1:.+]] = affine_map<(d0, d1) -> (d0 floordiv 8 + d1 floordiv 128)>
// CHECK-LABEL: llzk.func @dims_only_no_brackets(
// CHECK-SAME:                                   %[[V_0:[0-9a-zA-Z_\.]+]]: index,
// CHECK-SAME:                                   %[[V_1:[0-9a-zA-Z_\.]+]]: index) -> index {
// CHECK-NEXT:    %[[V_2:[0-9a-zA-Z_\.]+]] = applymap (%[[V_0]], %[[V_1]]) #[[$ATTR_1]]
// CHECK-NEXT:    return %[[V_2]] : index
// CHECK-NEXT:  }
// -----
llzk.func @dims_only_empty_brackets(%a: index, %b: index) -> index {
  %x = llzk.applymap(%a, %b)[] affine_map<(d0, d1) -> (d0 floordiv 8 + d1 floordiv 128)>
  return %x : index
}
// CHECK: #[[$ATTR_2:.+]] = affine_map<(d0, d1) -> (d0 floordiv 8 + d1 floordiv 128)>
// CHECK-LABEL: llzk.func @dims_only_empty_brackets(
// CHECK-SAME:                                      %[[V_0:[0-9a-zA-Z_\.]+]]: index,
// CHECK-SAME:                                      %[[V_1:[0-9a-zA-Z_\.]+]]: index) -> index {
// CHECK-NEXT:    %[[V_2:[0-9a-zA-Z_\.]+]] = applymap (%[[V_0]], %[[V_1]]) #[[$ATTR_2]]
// CHECK-NEXT:    return %[[V_2]] : index
// CHECK-NEXT:  }
// -----
#mapB = affine_map<()[s1,s2] -> (s1 + s2)>
llzk.func @syms_only(%a: index, %b: index) -> index {
  %x = llzk.applymap()[%b, %a] #mapB
  return %x : index
}
// CHECK: #[[$ATTR_3:.+]] = affine_map<()[s0, s1] -> (s0 + s1)>
// CHECK-LABEL: llzk.func @syms_only(
// CHECK-SAME:                       %[[V_0:[0-9a-zA-Z_\.]+]]: index,
// CHECK-SAME:                       %[[V_1:[0-9a-zA-Z_\.]+]]: index) -> index {
// CHECK-NEXT:    %[[V_2:[0-9a-zA-Z_\.]+]] = applymap (){{\[}}%[[V_1]], %[[V_0]]] #[[$ATTR_3]]
// CHECK-NEXT:    return %[[V_2]] : index
// CHECK-NEXT:  }
// -----
#mapC = affine_map<(d0)[s1,s2] -> (d0 * s1 + s2)>
llzk.func @dims_and_syms(%a: index, %b: index, %c: index) -> index {
  %x = llzk.applymap(%a)[%b,%c] #mapC
  return %x : index
}
// CHECK: #[[$ATTR_4:.+]] = affine_map<(d0)[s0, s1] -> (d0 * s0 + s1)>
// CHECK-LABEL: llzk.func @dims_and_syms(
// CHECK-SAME:                           %[[V_0:[0-9a-zA-Z_\.]+]]: index,
// CHECK-SAME:                           %[[V_1:[0-9a-zA-Z_\.]+]]: index,
// CHECK-SAME:                           %[[V_2:[0-9a-zA-Z_\.]+]]: index) -> index {
// CHECK-NEXT:    %[[V_3:[0-9a-zA-Z_\.]+]] = applymap (%[[V_0]]){{\[}}%[[V_1]], %[[V_2]]] #[[$ATTR_4]]
// CHECK-NEXT:    return %[[V_3]] : index
// CHECK-NEXT:  }
