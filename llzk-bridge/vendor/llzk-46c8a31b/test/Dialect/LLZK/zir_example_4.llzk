// RUN: llzk-opt -I %S -split-input-file -llzk-flatten -verify-diagnostics %s | FileCheck --enable-var-scope %s

#map = affine_map<()[s0, s1] -> (s0 floordiv s1)>
module attributes {veridise.lang = "llzk"} {
  llzk.struct @S<[@X, @N, @P]> {
    func @compute(%arg0: !llzk.array<@X x !llzk.felt>) -> !llzk.struct<@S<[@X, @N, @P]>> {
      %self = new_struct : !llzk.struct<@S<[@X, @N, @P]>>
      %c0 = arith.constant 0 : index
      %0 = readarr %arg0[%c0] : !llzk.array<@X x !llzk.felt>, !llzk.felt
      return %self : !llzk.struct<@S<[@X, @N, @P]>>
    }
    func @constrain(%arg0: !llzk.struct<@S<[@X, @N, @P]>>, %arg1: !llzk.array<@X x !llzk.felt>) {
      return
    }
  }
  llzk.struct @B<[@N]> {
    func @compute() -> !llzk.struct<@B<[@N]>> {
      %self = new_struct : !llzk.struct<@B<[@N]>>
      return %self : !llzk.struct<@B<[@N]>>
    }
    func @constrain(%arg0: !llzk.struct<@B<[@N]>>) {
      return
    }
  }
  llzk.struct @A<[@N]> {
    func @compute() -> !llzk.struct<@A<[@N]>> {
      %self = new_struct : !llzk.struct<@A<[@N]>>
      %0 = read_const @N : index
      %c2 = arith.constant 2 : index
      %array = new_array{()[%0, %c2]} : !llzk.array<#map x !llzk.felt>
      %1 = call @S::@compute(%array) {()[%0, %c2]} : (!llzk.array<#map x !llzk.felt>) -> !llzk.struct<@S<[#map, @N, 2]>>
      %2 = call @B::@compute() {()[%0, %c2]} : () -> !llzk.struct<@B<[#map]>>
      return %self : !llzk.struct<@A<[@N]>>
    }
    func @constrain(%arg0: !llzk.struct<@A<[@N]>>) {
      return
    }
  }
  llzk.struct @Main {
    func @compute() -> !llzk.struct<@Main> {
      %s = llzk.call @A::@compute() : () -> !llzk.struct<@A<[4]>>
      %self = new_struct : !llzk.struct<@Main>
      return %self : !llzk.struct<@Main>
    }
    func @constrain(%arg0: !llzk.struct<@Main>) {
      return
    }
  }
}
// CHECK-LABEL: llzk.struct @S_2_4_2 {
// CHECK-NEXT:    func @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !llzk.array<2 x !llzk.felt>) -> !llzk.struct<@S_2_4_2> {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = new_struct : <@S_2_4_2>
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = readarr %[[V0]]{{\[}}%[[V1]]] : <2 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      return %[[V2]] : !llzk.struct<@S_2_4_2>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V4:[0-9a-zA-Z_\.]+]]: !llzk.struct<@S_2_4_2>, %[[V5:[0-9a-zA-Z_\.]+]]: !llzk.array<2 x !llzk.felt>) {
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: llzk.struct @B_2 {
// CHECK-NEXT:    func @compute() -> !llzk.struct<@B_2> {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = new_struct : <@B_2>
// CHECK-NEXT:      return %[[V0]] : !llzk.struct<@B_2>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V1:[0-9a-zA-Z_\.]+]]: !llzk.struct<@B_2>) {
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: llzk.struct @A_4 {
// CHECK-NEXT:    func @compute() -> !llzk.struct<@A_4> {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = new_struct : <@A_4>
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = new_array  : <2 x !llzk.felt>
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = call @S_2_4_2::@compute(%[[V1]]) : (!llzk.array<2 x !llzk.felt>) -> !llzk.struct<@S_2_4_2>
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = call @B_2::@compute() : () -> !llzk.struct<@B_2>
// CHECK-NEXT:      return %[[V0]] : !llzk.struct<@A_4>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V4:[0-9a-zA-Z_\.]+]]: !llzk.struct<@A_4>) {
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: llzk.struct @Main {
// CHECK-NEXT:    func @compute() -> !llzk.struct<@Main> {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = call @A_4::@compute() : () -> !llzk.struct<@A_4>
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = new_struct : <@Main>
// CHECK-NEXT:      return %[[V1]] : !llzk.struct<@Main>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Main>) {
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
