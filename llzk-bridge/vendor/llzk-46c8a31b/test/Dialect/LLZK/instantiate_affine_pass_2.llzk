// RUN: llzk-opt -I %S -split-input-file -llzk-flatten -verify-diagnostics %s | FileCheck --enable-var-scope %s

#id = affine_map<(i)->(i)>
#IdxToLen = affine_map<(i)->(5*i+1)>
!ToFelt = !llzk.struct<@ToFelt<[#id]>>
// In this test, `#IdxToLen` is instantiated via a `new_array` op but there are no instantiations of
// the `!llzk.struct<@ToFelt<[#id]>>` StructType (i.e. no calls to `@ToFelt::@compute()`) so no
// flattened versions of `@ToFelt` or `@VarArray` are created (the latter has an instantiation but
// only the first parameter is concrete due to the aforementioned and we do not do partial flattening).
module attributes {veridise.lang = "llzk"} {
  // pre-defined
  llzk.struct @VarArray<[@N, @T]> {
    field @val: !llzk.array<@N x !llzk.tvar<@T>>

    func @compute(%inp: !llzk.array<@N x !llzk.tvar<@T>>) -> !llzk.struct<@VarArray<[@N, @T]>> {
      %self = new_struct : !llzk.struct<@VarArray<[@N, @T]>>
      writef %self[@val] = %inp : !llzk.struct<@VarArray<[@N, @T]>>, !llzk.array<@N x !llzk.tvar<@T>>
      return %self : !llzk.struct<@VarArray<[@N, @T]>>
    }

    func @constrain(%self: !llzk.struct<@VarArray<[@N, @T]>>, %inp: !llzk.array<@N x !llzk.tvar<@T>>) {
      return
    }
  }

  llzk.struct @ToFelt<[@A]> {
    field @out: !llzk.felt {llzk.pub}

    func @compute() -> !llzk.struct<@ToFelt<[@A]>> {
      %self = new_struct : !llzk.struct<@ToFelt<[@A]>>
      %constA = read_const @A : !llzk.felt
      writef %self[@out] = %constA : !llzk.struct<@ToFelt<[@A]>>, !llzk.felt
      return %self: !llzk.struct<@ToFelt<[@A]>>
    }

    func @constrain(%self: !llzk.struct<@ToFelt<[@A]>>) {
      return
    }
  }

  llzk.struct @ComponentB {
    func @compute(%a: index) -> !llzk.struct<@ComponentB> {
      %self = new_struct : !llzk.struct<@ComponentB>
      // In real code, this should be loop induction variable
      %n = arith.constant 2 : index
      // The array length is a function of 'i' and it contains non-homogeneous structs
      //    !ToFelt = !llzk.struct<@ToFelt<[#id]>>
      %arr = llzk.new_array{(%n)} : !llzk.array<#IdxToLen x !ToFelt>
      // Real code would probably have a loop here j= 0..n that assigns values to the array
      //
      // Creates a VarArray with length as a function of 'n' and non-homogeneous element type
      %wsi = llzk.call @VarArray::@compute(%arr){(%n)} 
        : (!llzk.array<#IdxToLen x !ToFelt>) -> !llzk.struct<@VarArray<[#IdxToLen, !ToFelt]>>
      //
      return %self : !llzk.struct<@ComponentB>
    }

    func @constrain(%self: !llzk.struct<@ComponentB>, %a: index) {
      return
    }
  }
}

// CHECK: #[[$M0:[0-9a-zA-Z_\.]+]] = affine_map<(d0) -> (d0)>
// CHECK-LABEL: llzk.struct @VarArray<[@N, @T]> {
// CHECK-NEXT:    field @val : !llzk.array<@N x !llzk.tvar<@T>>
// CHECK-NEXT:    func @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !llzk.array<@N x !llzk.tvar<@T>>) -> !llzk.struct<@VarArray<[@N, @T]>> {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = new_struct : <@VarArray<[@N, @T]>>
// CHECK-NEXT:      writef %[[V1]][@val] = %[[V0]] : <@VarArray<[@N, @T]>>, !llzk.array<@N x !llzk.tvar<@T>>
// CHECK-NEXT:      return %[[V1]] : !llzk.struct<@VarArray<[@N, @T]>>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !llzk.struct<@VarArray<[@N, @T]>>, %[[V3:[0-9a-zA-Z_\.]+]]: !llzk.array<@N x !llzk.tvar<@T>>) {
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: llzk.struct @ToFelt<[@A]> {
// CHECK-NEXT:    field @out : !llzk.felt {llzk.pub}
// CHECK-NEXT:    func @compute() -> !llzk.struct<@ToFelt<[@A]>> {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = new_struct : <@ToFelt<[@A]>>
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = read_const @A : !llzk.felt
// CHECK-NEXT:      writef %[[V0]][@out] = %[[V1]] : <@ToFelt<[@A]>>, !llzk.felt
// CHECK-NEXT:      return %[[V0]] : !llzk.struct<@ToFelt<[@A]>>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ToFelt<[@A]>>) {
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: llzk.struct @ComponentB {
// CHECK-NEXT:    func @compute(%[[V0:[0-9a-zA-Z_\.]+]]: index) -> !llzk.struct<@ComponentB> {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentB>
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = new_array  : <11 x !llzk.struct<@ToFelt<[#[[$M0]]]>>>
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = call @VarArray::@compute(%[[V2]]) : (!llzk.array<11 x !llzk.struct<@ToFelt<[#[[$M0]]]>>>) -> !llzk.struct<@VarArray<[11, !llzk.struct<@ToFelt<[#[[$M0]]]>>]>>
// CHECK-NEXT:      return %[[V1]] : !llzk.struct<@ComponentB>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V4:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentB>, %[[V5:[0-9a-zA-Z_\.]+]]: index) {
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
