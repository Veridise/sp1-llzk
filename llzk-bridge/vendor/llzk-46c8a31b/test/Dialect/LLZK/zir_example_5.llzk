// RUN: llzk-opt -I %S -split-input-file -llzk-flatten -verify-diagnostics %s | FileCheck --enable-var-scope %s

#map = affine_map<()[s0, s1] -> (s0 floordiv s1)>
module attributes {veridise.lang = "llzk"} {
  llzk.struct @Unpack<[@N, @P, @Aff]> {
    func @compute(%arg0: !llzk.array<@Aff x !llzk.felt>) -> !llzk.struct<@Unpack<[@N, @P, @Aff]>> {
      %self = new_struct : !llzk.struct<@Unpack<[@N, @P, @Aff]>>
      %c0 = arith.constant 0 : index
      %0 = readarr %arg0[%c0] : !llzk.array<@Aff x !llzk.felt>, !llzk.felt
      return %self : !llzk.struct<@Unpack<[@N, @P, @Aff]>>
    }
    func @constrain(%arg0: !llzk.struct<@Unpack<[@N, @P, @Aff]>>, %arg1: !llzk.array<@Aff x !llzk.felt>) {
      return
    }
  }
  llzk.struct @User1 {
    func @compute() -> !llzk.struct<@User1> {
      %0 = llzk.constfelt 42
      %1 = llzk.constfelt 42
      %2 = llzk.constfelt 42
      %3 = llzk.constfelt 42

      %arr = new_array %0, %1, %2, %3 : !llzk.array<4 x !llzk.felt>
      %a = arith.constant 8 : index
      %b = arith.constant 2 : index
      %s = llzk.call @Unpack::@compute(%arr) {()[%a, %b]}
        : (!llzk.array<4 x !llzk.felt>) -> !llzk.struct<@Unpack<[8, 2, #map]>>
      %self = new_struct : !llzk.struct<@User1>
      return %self : !llzk.struct<@User1>
    }
    func @constrain(%arg0: !llzk.struct<@User1>) {
      return
    }
  }
}
// CHECK-LABEL: llzk.struct @Unpack_8_2_4 {
// CHECK-NEXT:    func @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !llzk.array<4 x !llzk.felt>) -> !llzk.struct<@Unpack_8_2_4> {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = new_struct : <@Unpack_8_2_4>
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = readarr %[[V0]]{{\[}}%[[V1]]] : <4 x !llzk.felt>, !llzk.felt
// CHECK-NEXT:      return %[[V2]] : !llzk.struct<@Unpack_8_2_4>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V4:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Unpack_8_2_4>, %[[V5:[0-9a-zA-Z_\.]+]]: !llzk.array<4 x !llzk.felt>) {
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: llzk.struct @User1 {
// CHECK-NEXT:    func @compute() -> !llzk.struct<@User1> {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = constfelt 42
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = new_array %[[V0]], %[[V0]], %[[V0]], %[[V0]] : <4 x !llzk.felt>
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = call @Unpack_8_2_4::@compute(%[[V1]]) : (!llzk.array<4 x !llzk.felt>) -> !llzk.struct<@Unpack_8_2_4>
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = new_struct : <@User1>
// CHECK-NEXT:      return %[[V3]] : !llzk.struct<@User1>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%[[V4:[0-9a-zA-Z_\.]+]]: !llzk.struct<@User1>) {
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
