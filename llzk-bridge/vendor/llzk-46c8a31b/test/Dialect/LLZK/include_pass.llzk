// RUN: llzk-opt -I %S -split-input-file -llzk-inline-includes %s 2>&1 | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  llzk.include "Inputs/header_1.llzk" as @alias1

  llzk.func @test_func() {
    llzk.call @alias1::@pkg_two::@my_func_2() : () -> ()
    return
  }
}
//CHECK-LABEL: module attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:    module @alias1 attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:      llzk.func private @my_func_0()
//CHECK-NEXT:      module @pkg_one {
//CHECK-NEXT:        llzk.func private @my_func_1()
//CHECK-NEXT:      }
//CHECK-NEXT:      module @pkg_two {
//CHECK-NEXT:        llzk.func private @my_func_2()
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:    llzk.func @test_func() {
//CHECK-NEXT:      call @alias1::@pkg_two::@my_func_2() : () -> ()
//CHECK-NEXT:      return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  module @outer {
    llzk.include "Inputs/header_1.llzk" as @alias2

    llzk.func @test_func() {
      llzk.call @outer::@alias2::@pkg_two::@my_func_2() : () -> ()
      return
    }
  }
}
//CHECK-LABEL: module attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:    module @outer {
//CHECK-NEXT:      module @alias2 attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:        llzk.func private @my_func_0()
//CHECK-NEXT:        module @pkg_one {
//CHECK-NEXT:          llzk.func private @my_func_1()
//CHECK-NEXT:        }
//CHECK-NEXT:        module @pkg_two {
//CHECK-NEXT:          llzk.func private @my_func_2()
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:      llzk.func @test_func() {
//CHECK-NEXT:        call @outer::@alias2::@pkg_two::@my_func_2() : () -> ()
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  module @a {
    module @b {
      module @c {
        llzk.include "Inputs/header_1.llzk" as @alias3
      }
    }
  }

  llzk.func @test_func() {
    llzk.call @a::@b::@c::@alias3::@pkg_two::@my_func_2() : () -> ()
    return
  }
}
//CHECK-LABEL: module attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:    module @a {
//CHECK-NEXT:      module @b {
//CHECK-NEXT:        module @c {
//CHECK-NEXT:          module @alias3 attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:            llzk.func private @my_func_0()
//CHECK-NEXT:            module @pkg_one {
//CHECK-NEXT:              llzk.func private @my_func_1()
//CHECK-NEXT:            }
//CHECK-NEXT:            module @pkg_two {
//CHECK-NEXT:              llzk.func private @my_func_2()
//CHECK-NEXT:            }
//CHECK-NEXT:          }
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:    llzk.func @test_func() {
//CHECK-NEXT:      call @a::@b::@c::@alias3::@pkg_two::@my_func_2() : () -> ()
//CHECK-NEXT:      return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.include "Inputs/header_2.llzk" as @double

  llzk.func @test_func() {
    llzk.call @double::@test_func() : () -> ()
    llzk.call @double::@std::@pkg_two::@my_func_2() : () -> ()
    return
  }
}
//CHECK-LABEL: module attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:    module @double attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:      module @std attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:        llzk.func private @my_func_0()
//CHECK-NEXT:        module @pkg_one {
//CHECK-NEXT:          llzk.func private @my_func_1()
//CHECK-NEXT:        }
//CHECK-NEXT:        module @pkg_two {
//CHECK-NEXT:          llzk.func private @my_func_2()
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:      llzk.func @test_func() {
//CHECK-NEXT:        call @std::@pkg_two::@my_func_2() : () -> ()
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:    llzk.func @test_func() {
//CHECK-NEXT:      call @double::@test_func() : () -> ()
//CHECK-NEXT:      call @double::@std::@pkg_two::@my_func_2() : () -> ()
//CHECK-NEXT:      return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.include "zir_example_0.llzk" as @std

  llzk.struct @C1 {
    field @z : !llzk.struct<@std::@risc0::@Reg> {llzk.pub}

    func @compute(%x: !llzk.felt, %y: !llzk.felt) -> !llzk.struct<@C1> {
      %self = new_struct : !llzk.struct<@C1>
      %add_0 = add %x, %y
      %reg_0 = call @std::@risc0::@Reg::@compute(%add_0) : (!llzk.felt) -> (!llzk.struct<@std::@risc0::@Reg>)
      writef %self[@z] = %reg_0 : !llzk.struct<@C1>, !llzk.struct<@std::@risc0::@Reg>
      return %self: !llzk.struct<@C1>
    }

    func @constrain(%self: !llzk.struct<@C1>, %x: !llzk.felt, %y: !llzk.felt) {
      %reg_0 = readf %self[@z] : !llzk.struct<@C1>, !llzk.struct<@std::@risc0::@Reg>
      %add_0 = add %x, %y
      call @std::@risc0::@Reg::@constrain(%reg_0, %add_0) : (!llzk.struct<@std::@risc0::@Reg>, !llzk.felt) -> ()
      return
    }
  }
}
//CHECK-LABEL: module attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:    module @std attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:      module @risc0 {
//CHECK-NEXT:        llzk.struct @ValU32 {
//CHECK-NEXT:          field @low : !llzk.felt
//CHECK-NEXT:          field @high : !llzk.felt
//CHECK-NEXT:          func @compute(%arg0: !llzk.felt, %arg1: !llzk.felt) -> !llzk.struct<@risc0::@ValU32> {
//CHECK-NEXT:            %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@risc0::@ValU32>
//CHECK-NEXT:            writef %[[SELF]][@low] = %arg0 : <@risc0::@ValU32>, !llzk.felt
//CHECK-NEXT:            writef %[[SELF]][@high] = %arg1 : <@risc0::@ValU32>, !llzk.felt
//CHECK-NEXT:            return %[[SELF]] : !llzk.struct<@risc0::@ValU32>
//CHECK-NEXT:          }
//CHECK-NEXT:          func @constrain(%arg0: !llzk.struct<@risc0::@ValU32>, %arg1: !llzk.felt, %arg2: !llzk.felt) {
//CHECK-NEXT:            return
//CHECK-NEXT:          }
//CHECK-NEXT:        }
//CHECK-NEXT:        llzk.struct @Reg {
//CHECK-NEXT:          field @reg : !llzk.felt {llzk.pub}
//CHECK-NEXT:          func @compute(%arg0: !llzk.felt) -> !llzk.struct<@risc0::@Reg> {
//CHECK-NEXT:            %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@risc0::@Reg>
//CHECK-NEXT:            writef %[[SELF]][@reg] = %arg0 : <@risc0::@Reg>, !llzk.felt
//CHECK-NEXT:            return %[[SELF]] : !llzk.struct<@risc0::@Reg>
//CHECK-NEXT:          }
//CHECK-NEXT:          func @constrain(%arg0: !llzk.struct<@risc0::@Reg>, %arg1: !llzk.felt) {
//CHECK-NEXT:            %[[T0:[0-9a-zA-Z_\.]+]] = readf %arg0[@reg] : <@risc0::@Reg>, !llzk.felt
//CHECK-NEXT:            emit_eq %arg1, %[[T0]] : !llzk.felt, !llzk.felt
//CHECK-NEXT:            return
//CHECK-NEXT:          }
//CHECK-NEXT:        }
//CHECK-NEXT:        llzk.struct @Div {
//CHECK-NEXT:          field @reciprocal : !llzk.felt
//CHECK-NEXT:          field @synthetic_return : !llzk.felt {llzk.pub}
//CHECK-NEXT:          func @compute(%arg0: !llzk.felt, %arg1: !llzk.felt) -> !llzk.struct<@risc0::@Div> {
//CHECK-NEXT:            %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@risc0::@Div>
//CHECK-NEXT:            %[[T0:[0-9a-zA-Z_\.]+]] = inv %arg1
//CHECK-NEXT:            writef %[[SELF]][@reciprocal] = %[[T0]] : <@risc0::@Div>, !llzk.felt
//CHECK-NEXT:            %[[T1:[0-9a-zA-Z_\.]+]] = mul %[[T0]], %arg0
//CHECK-NEXT:            writef %[[SELF]][@synthetic_return] = %[[T1]] : <@risc0::@Div>, !llzk.felt
//CHECK-NEXT:            return %[[SELF]] : !llzk.struct<@risc0::@Div>
//CHECK-NEXT:          }
//CHECK-NEXT:          func @constrain(%arg0: !llzk.struct<@risc0::@Div>, %arg1: !llzk.felt, %arg2: !llzk.felt) {
//CHECK-NEXT:            %[[T0:[0-9a-zA-Z_\.]+]] = readf %arg0[@reciprocal] : <@risc0::@Div>, !llzk.felt
//CHECK-NEXT:            %[[T1:[0-9a-zA-Z_\.]+]] = mul %[[T0]], %arg2
//CHECK-NEXT:            %felt_const_1 = constfelt 1
//CHECK-NEXT:            emit_eq %[[T1]], %felt_const_1 : !llzk.felt, !llzk.felt
//CHECK-NEXT:            %[[T2:[0-9a-zA-Z_\.]+]] = readf %arg0[@synthetic_return] : <@risc0::@Div>, !llzk.felt
//CHECK-NEXT:            %[[T3:[0-9a-zA-Z_\.]+]] = mul %[[T0]], %arg1
//CHECK-NEXT:            emit_eq %[[T2]], %[[T3]] : !llzk.felt, !llzk.felt
//CHECK-NEXT:            return
//CHECK-NEXT:          }
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:    llzk.struct @C1 {
//CHECK-NEXT:      field @z : !llzk.struct<@std::@risc0::@Reg> {llzk.pub}
//CHECK-NEXT:      func @compute(%arg0: !llzk.felt, %arg1: !llzk.felt) -> !llzk.struct<@C1> {
//CHECK-NEXT:        %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@C1>
//CHECK-NEXT:        %[[T0:[0-9a-zA-Z_\.]+]] = add %arg0, %arg1
//CHECK-NEXT:        %[[T1:[0-9a-zA-Z_\.]+]] = call @std::@risc0::@Reg::@compute(%[[T0]]) : (!llzk.felt) -> !llzk.struct<@std::@risc0::@Reg>
//CHECK-NEXT:        writef %[[SELF]][@z] = %[[T1]] : <@C1>, !llzk.struct<@std::@risc0::@Reg>
//CHECK-NEXT:        return %[[SELF]] : !llzk.struct<@C1>
//CHECK-NEXT:      }
//CHECK-NEXT:      func @constrain(%arg0: !llzk.struct<@C1>, %arg1: !llzk.felt, %arg2: !llzk.felt) {
//CHECK-NEXT:        %[[T0:[0-9a-zA-Z_\.]+]] = readf %arg0[@z] : <@C1>, !llzk.struct<@std::@risc0::@Reg>
//CHECK-NEXT:        %[[T1:[0-9a-zA-Z_\.]+]] = add %arg1, %arg2
//CHECK-NEXT:        call @std::@risc0::@Reg::@constrain(%[[T0]], %[[T1]]) : (!llzk.struct<@std::@risc0::@Reg>, !llzk.felt) -> ()
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.include "Inputs/header_9.llzk" as @libA

  llzk.struct @D {
    field @z : !llzk.struct<@libA::@libB::@libC::@StructC> {llzk.pub}

    func @compute(%x: !llzk.felt, %y: !llzk.felt) -> !llzk.struct<@D> {
      %self = new_struct : !llzk.struct<@D>
      %reg_0 = call @libA::@libB::@libC::@StructC::@compute() : () -> (!llzk.struct<@libA::@libB::@libC::@StructC>)
      writef %self[@z] = %reg_0 : !llzk.struct<@D>, !llzk.struct<@libA::@libB::@libC::@StructC>
      return %self: !llzk.struct<@D>
    }

    func @constrain(%self: !llzk.struct<@D>, %x: !llzk.felt, %y: !llzk.felt) {
      %reg_0 = readf %self[@z] : !llzk.struct<@D>, !llzk.struct<@libA::@libB::@libC::@StructC>
      call @libA::@libB::@libC::@StructC::@constrain(%reg_0) : (!llzk.struct<@libA::@libB::@libC::@StructC>) -> ()
      return
    }
  }
}
//CHECK-LABEL:  module attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:    module @libA attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:      module @libB attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:        module @libC {
//CHECK-NEXT:          llzk.struct @StructC {
//CHECK-NEXT:            func @compute() -> !llzk.struct<@libC::@StructC> {
//CHECK-NEXT:              %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@libC::@StructC>
//CHECK-NEXT:              return %[[SELF]] : !llzk.struct<@libC::@StructC>
//CHECK-NEXT:            }
//CHECK-NEXT:            func @constrain(%arg0: !llzk.struct<@libC::@StructC>) {
//CHECK-NEXT:              return
//CHECK-NEXT:            }
//CHECK-NEXT:          }
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:    llzk.struct @D {
//CHECK-NEXT:      field @z : !llzk.struct<@libA::@libB::@libC::@StructC> {llzk.pub}
//CHECK-NEXT:      func @compute(%arg0: !llzk.felt, %arg1: !llzk.felt) -> !llzk.struct<@D> {
//CHECK-NEXT:        %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@D>
//CHECK-NEXT:        %[[T0:[0-9a-zA-Z_\.]+]] = call @libA::@libB::@libC::@StructC::@compute() : () -> !llzk.struct<@libA::@libB::@libC::@StructC>
//CHECK-NEXT:        writef %[[SELF]][@z] = %[[T0]] : <@D>, !llzk.struct<@libA::@libB::@libC::@StructC>
//CHECK-NEXT:        return %[[SELF]] : !llzk.struct<@D>
//CHECK-NEXT:      }
//CHECK-NEXT:      func @constrain(%arg0: !llzk.struct<@D>, %arg1: !llzk.felt, %arg2: !llzk.felt) {
//CHECK-NEXT:        %[[T0:[0-9a-zA-Z_\.]+]] = readf %arg0[@z] : <@D>, !llzk.struct<@libA::@libB::@libC::@StructC>
//CHECK-NEXT:        call @libA::@libB::@libC::@StructC::@constrain(%[[T0]]) : (!llzk.struct<@libA::@libB::@libC::@StructC>) -> ()
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.include "Inputs/header_10.llzk" as @libA

  llzk.struct @StructD {
    field @z : !llzk.struct<@libA::@libB::@libC::@StructC> {llzk.pub}
    field @y : !llzk.struct<@libA::@StructB> {llzk.pub}

    func @compute(%x: !llzk.felt, %y: !llzk.felt) -> !llzk.struct<@StructD> {
      %self = new_struct : !llzk.struct<@StructD>

      %reg_0 = call @libA::@libB::@libC::@StructC::@compute() : () -> (!llzk.struct<@libA::@libB::@libC::@StructC>)
      writef %self[@z] = %reg_0 : !llzk.struct<@StructD>, !llzk.struct<@libA::@libB::@libC::@StructC>

      %reg_1 = call @libA::@StructB::@compute() : () -> (!llzk.struct<@libA::@StructB>)
      writef %self[@y] = %reg_1 : !llzk.struct<@StructD>, !llzk.struct<@libA::@StructB>

      return %self: !llzk.struct<@StructD>
    }

    func @constrain(%self: !llzk.struct<@StructD>, %x: !llzk.felt, %y: !llzk.felt) {
      %reg_0 = readf %self[@z] : !llzk.struct<@StructD>, !llzk.struct<@libA::@libB::@libC::@StructC>
      call @libA::@libB::@libC::@StructC::@constrain(%reg_0) : (!llzk.struct<@libA::@libB::@libC::@StructC>) -> ()

      %reg_1 = readf %self[@y] : !llzk.struct<@StructD>, !llzk.struct<@libA::@StructB>
      call @libA::@StructB::@constrain(%reg_1) : (!llzk.struct<@libA::@StructB>) -> ()

      return
    }
  }
}
//CHECK-LABEL: module attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:    module @libA attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:      module @libB attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:        module @libC {
//CHECK-NEXT:          llzk.struct @StructC {
//CHECK-NEXT:            func @compute() -> !llzk.struct<@libC::@StructC> {
//CHECK-NEXT:              %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@libC::@StructC>
//CHECK-NEXT:              return %[[SELF]] : !llzk.struct<@libC::@StructC>
//CHECK-NEXT:            }
//CHECK-NEXT:            func @constrain(%arg0: !llzk.struct<@libC::@StructC>) {
//CHECK-NEXT:              return
//CHECK-NEXT:            }
//CHECK-NEXT:          }
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:      llzk.struct @StructB {
//CHECK-NEXT:        field @x : !llzk.struct<@libB::@libC::@StructC>
//CHECK-NEXT:        func @compute() -> !llzk.struct<@StructB> {
//CHECK-NEXT:          %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@StructB>
//CHECK-NEXT:          %[[T0:[0-9a-zA-Z_\.]+]] = call @libB::@libC::@StructC::@compute() : () -> !llzk.struct<@libB::@libC::@StructC>
//CHECK-NEXT:          writef %[[SELF]][@x] = %[[T0]] : <@StructB>, !llzk.struct<@libB::@libC::@StructC>
//CHECK-NEXT:          return %[[SELF]] : !llzk.struct<@StructB>
//CHECK-NEXT:        }
//CHECK-NEXT:        func @constrain(%arg0: !llzk.struct<@StructB>) {
//CHECK-NEXT:          return
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:    llzk.struct @StructD {
//CHECK-NEXT:      field @z : !llzk.struct<@libA::@libB::@libC::@StructC> {llzk.pub}
//CHECK-NEXT:      field @y : !llzk.struct<@libA::@StructB> {llzk.pub}
//CHECK-NEXT:      func @compute(%arg0: !llzk.felt, %arg1: !llzk.felt) -> !llzk.struct<@StructD> {
//CHECK-NEXT:        %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@StructD>
//CHECK-NEXT:        %[[T0:[0-9a-zA-Z_\.]+]] = call @libA::@libB::@libC::@StructC::@compute() : () -> !llzk.struct<@libA::@libB::@libC::@StructC>
//CHECK-NEXT:        writef %[[SELF]][@z] = %[[T0]] : <@StructD>, !llzk.struct<@libA::@libB::@libC::@StructC>
//CHECK-NEXT:        %[[T1:[0-9a-zA-Z_\.]+]] = call @libA::@StructB::@compute() : () -> !llzk.struct<@libA::@StructB>
//CHECK-NEXT:        writef %[[SELF]][@y] = %[[T1]] : <@StructD>, !llzk.struct<@libA::@StructB>
//CHECK-NEXT:        return %[[SELF]] : !llzk.struct<@StructD>
//CHECK-NEXT:      }
//CHECK-NEXT:      func @constrain(%arg0: !llzk.struct<@StructD>, %arg1: !llzk.felt, %arg2: !llzk.felt) {
//CHECK-NEXT:        %[[T0:[0-9a-zA-Z_\.]+]] = readf %arg0[@z] : <@StructD>, !llzk.struct<@libA::@libB::@libC::@StructC>
//CHECK-NEXT:        call @libA::@libB::@libC::@StructC::@constrain(%[[T0]]) : (!llzk.struct<@libA::@libB::@libC::@StructC>) -> ()
//CHECK-NEXT:        %[[T1:[0-9a-zA-Z_\.]+]] = readf %arg0[@y] : <@StructD>, !llzk.struct<@libA::@StructB>
//CHECK-NEXT:        call @libA::@StructB::@constrain(%[[T1]]) : (!llzk.struct<@libA::@StructB>) -> ()
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:  }
